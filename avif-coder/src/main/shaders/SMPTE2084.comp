/*
 * MIT License
 *
 * Copyright (c) 2023 Radzivon Bartoshyk
 * avif-coder [https://github.com/awxkee/avif-coder]
 *
 * Created by Radzivon Bartoshyk on 22/9/2023
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

/**
    Applies PQ EOTF function with BT 2020 Primaries
**/

#version 450
#pragma shader_stage(compute)

layout (local_size_x_id = 0, local_size_y_id = 1) in;

layout (binding = 0) uniform sampler2D inputImage;
layout (binding = 1) uniform writeonly image2D outputImage;

layout (push_constant, std140) uniform PushConstant {
    mat3 colorMatrix;
    vec3 lumaPrimaries;
    int toneMapper;// Rec2408 - 1, Logarithmic
    int oetfCurve;// curve 1 - Rec2020, 2 - P3
} constant;

float LinearSRGBTosRGB(float linear) {
    if (linear <= 0.0031308f) {
        return 12.92f * linear;
    } else {
        return 1.055f * pow(linear, 1.0f / 2.4f) - 0.055f;
    }
}

void main() {
    vec2 coord = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec4 pixel = texture(inputImage, coord);
    vec4 color = vec4(pixel.rgb, 0.0f);
    vec4 lumaVec = vec4(constant.lumaPrimaries.x, constant.lumaPrimaries.y, constant.lumaPrimaries.y, 0.0f);

    float m1 = (2610.0 / 4096.0) / 4.0;
    float m2 = (2523.0 / 4096.0) * 128.0;
    float c1 = 3424.0 / 4096.0;
    float c2 = (2413.0 / 4096.0) * 32.0;
    float c3 = (2392.0 / 4096.0) * 32.0;
    vec4 p = pow(max(color, vec4(0.0)), vec4(1.0 / m2));
    vec4 denom = pow(max(p - c1, 0.0) / (c2 - c3 * p), vec4(1.0 / m1));
    color = vec4(vec3(denom * 10000.0 / 203.0f), 1.0);
    float Lin = dot(color, lumaVec);

    if (constant.toneMapper == 1) {
        float contentMaxBrightness = 1000;
        float whitePoint = 203.0f;
        float displayMaxBrightness = 250.0f;
        float Ld = contentMaxBrightness / whitePoint;
        float a = (displayMaxBrightness / whitePoint) / (Ld * Ld);
        float b = 1.0f / (displayMaxBrightness / whitePoint);
        float shScale = (1.f + a * Lin) / (1.f + b * Lin);
        color *= shScale;
    } else if (constant.toneMapper == 2) {
        float exposure = 1.0f;
        float Lmax = 1.0f;
        float Lout = log((1.0f + Lin * exposure)) / log(1.0f + Lmax * exposure);
        float shScale = Lout / Lin;
        color *= shScale;
    }

    vec4 xyzToRGB1 = vec4(constant.colorMatrix[0][0], constant.colorMatrix[0][1], constant.colorMatrix[0][2], 0.0f);
    vec4 xyzToRGB2 = vec4(constant.colorMatrix[1][0], constant.colorMatrix[1][1], constant.colorMatrix[1][2], 0.0f);
    vec4 xyzToRGB3 = vec4(constant.colorMatrix[2][0], constant.colorMatrix[2][1], constant.colorMatrix[2][2], 0.0f);

    float newR = color.r * xyzToRGB1.x + color.g * xyzToRGB1.y + color.b * xyzToRGB1.z;
    float newG = color.r * xyzToRGB2.x + color.g * xyzToRGB2.y + color.b * xyzToRGB2.z;
    float newB = color.r * xyzToRGB3.x + color.g * xyzToRGB3.y + color.b * xyzToRGB3.z;

    color.r = newR;
    color.g = newG;
    color.b = newB;

    if (constant.oetfCurve == 1) {
        float betaRec2020 = 0.018053968510807f;
        float alphaRec2020 = 1.09929682680944f;

        if (color.r < 1) {
            color.r = (0 <= betaRec2020 && color.r < betaRec2020) ? (4.5f * color.r) : (alphaRec2020 * pow(float(color.r), 0.45f) - (alphaRec2020 - 1));
        }

        if (color.g < 1) {
            color.g = (0 <= betaRec2020 && color.g < betaRec2020) ? (4.5f * color.g) : (alphaRec2020 * pow(float(color.g), 0.45f) - (alphaRec2020 - 1));
        }

        if (color.b < 1) {
            color.b = (0 <= betaRec2020 && color.b < betaRec2020) ? (4.5f * color.b) : (alphaRec2020 * pow(float(color.b), 0.45f) - (alphaRec2020 - 1));
        }
        color.a = 0;
        pixel = vec4(color.rgb, pixel.a);
    } else if (constant.oetfCurve == 2) {
        pixel = vec4(pow(vec3(color.rgb), vec3(1/2.6f)), pixel.a);
    } else if (constant.oetfCurve == 3) {
        color.r = LinearSRGBTosRGB(color.r);
        color.g = LinearSRGBTosRGB(color.g);
        color.b = LinearSRGBTosRGB(color.b);
        pixel = vec4(color.rgb, pixel.a);
    }

    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), pixel);
}
