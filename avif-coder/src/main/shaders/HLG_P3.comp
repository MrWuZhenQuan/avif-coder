/*
 * MIT License
 *
 * Copyright (c) 2023 Radzivon Bartoshyk
 * avif-coder [https://github.com/awxkee/avif-coder]
 *
 * Created by Radzivon Bartoshyk on 22/9/2023
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

/**
    Applies HLG EOTF function with P3 Primaries
**/

#version 450
#pragma shader_stage(compute)

layout (local_size_x_id = 0, local_size_y_id = 1) in;

layout (binding = 0) uniform sampler2D inputImage;
layout (binding = 1) uniform writeonly image2D outputImage;

void main() {
    vec2 coord = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec4 pixel = texture(inputImage, coord);
    vec4 color = vec4(pixel.rgb, 0.0f);

    float a = 0.17883277f;
    float b = 0.28466892f;
    float c = 0.55991073f;

    color.r = (color.r <= 0.5f) ? (color.r * color.r / 3.0f) : ((exp((color.r - c) / a) + b) / 12.f);
    color.g = (color.g <= 0.5f) ? (color.g * color.g / 3.0f) : ((exp((color.g - c) / a) + b) / 12.f);
    color.b = (color.b <= 0.5f) ? (color.b * color.b / 3.0f) : ((exp((color.b - c) / a) + b) / 12.f);

    vec4 lumaVec = vec4(0.2627f, 0.6780f, 0.0593f, 0.0f);
    float Lin = dot(color, lumaVec);

    float contentMaxBrightness = 1000;
    float whitePoint = 203.0f;
    float displayMaxBrightness = 250.0f;
    float Ld = contentMaxBrightness / whitePoint;
    float a1 = (displayMaxBrightness / whitePoint) / (Ld * Ld);
    float b1 = 1.0f / (displayMaxBrightness / whitePoint);
    float shScale = (1.f + a1 * Lin) / (1.f + b1 * Lin);
    color *= shScale;

    float betaRec2020 = 0.018053968510807f;
    float alphaRec2020 = 1.09929682680944f;

    color.a = 1.0f;
    pixel = vec4(pow(vec3(color.rgb), vec3(1/2.6f)), pixel.a);

    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), pixel);
}
