/*
 * MIT License
 *
 * Copyright (c) 2023 Radzivon Bartoshyk
 * avif-coder [https://github.com/awxkee/avif-coder]
 *
 * Created by Radzivon Bartoshyk on 22/9/2023
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

/**
    Applies HLG EOTF function with BT 2020 Primaries
**/

#version 450
#pragma shader_stage(compute)

layout (local_size_x_id = 0, local_size_y_id = 1) in;

layout (binding = 0) uniform sampler2D inputImage;
layout (binding = 1) uniform writeonly image2D outputImage;

void main() {
    vec2 coord = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec4 pixel = texture(inputImage, coord);
    vec4 color = vec4(pixel.rgb, 0.0f);

    float a = 0.17883277f;
    float b = 0.28466892f;
    float c = 0.55991073f;

    color.r = (color.r <= 0.5f) ? (color.r * color.r / 3.0f) : ((exp((color.r - c) / a) + b) / 12.f);
    color.g = (color.g <= 0.5f) ? (color.g * color.g / 3.0f) : ((exp((color.g - c) / a) + b) / 12.f);
    color.b = (color.b <= 0.5f) ? (color.b * color.b / 3.0f) : ((exp((color.b - c) / a) + b) / 12.f);

    float betaRec2020 = 0.018053968510807f;
    float alphaRec2020 = 1.09929682680944f;

    if (color.r < 1) {
        color.r = (0 <= betaRec2020 && color.r < betaRec2020) ? (4.5f * color.r) : (alphaRec2020 * pow(float(color.r), 0.45f) - (alphaRec2020 - 1));
    }

    if (color.g < 1) {
        color.g = (0 <= betaRec2020 && color.g < betaRec2020) ? (4.5f * color.g) : (alphaRec2020 * pow(float(color.g), 0.45f) - (alphaRec2020 - 1));
    }

    if (color.b < 1) {
        color.b = (0 <= betaRec2020 && color.b < betaRec2020) ? (4.5f * color.b) : (alphaRec2020 * pow(float(color.b), 0.45f) - (alphaRec2020 - 1));
    }

    color.a = 0;

    pixel = vec4(color.rgb, pixel.a);

    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), pixel);
}
