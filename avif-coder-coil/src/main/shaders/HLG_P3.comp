#version 450
#pragma shader_stage(compute)

layout (local_size_x_id = 0, local_size_y_id = 1) in;

layout (binding = 0) uniform sampler2D inputImage;
layout (binding = 1) uniform writeonly image2D outputImage;

void main() {
    vec2 coord = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec4 pixel = texture(inputImage, coord);
    vec4 color = vec4(pixel.rgb, 0.0f);

    float a = 0.17883277f;
    float b = 0.28466892f;
    float c = 0.55991073f;

    color.r = (color.r <= 0.5f) ? (color.r * color.r / 3.0f) : ((exp((color.r - c) / a) + b) / 12.f);
    color.g = (color.g <= 0.5f) ? (color.g * color.g / 3.0f) : ((exp((color.g - c) / a) + b) / 12.f);
    color.b = (color.b <= 0.5f) ? (color.b * color.b / 3.0f) : ((exp((color.b - c) / a) + b) / 12.f);

    float betaRec2020 = 0.018053968510807f;
    float alphaRec2020 = 1.09929682680944f;

    if (color.r < 1) {
        color.r = (0 <= betaRec2020 && color.r < betaRec2020) ? (4.5f * color.r) : (alphaRec2020 * pow(float(color.r), 0.45f) - (alphaRec2020 - 1));
    }

    if (color.g < 1) {
        color.g = (0 <= betaRec2020 && color.g < betaRec2020) ? (4.5f * color.g) : (alphaRec2020 * pow(float(color.g), 0.45f) - (alphaRec2020 - 1));
    }

    if (color.b < 1) {
        color.b = (0 <= betaRec2020 && color.b < betaRec2020) ? (4.5f * color.b) : (alphaRec2020 * pow(float(color.b), 0.45f) - (alphaRec2020 - 1));
    }

    color.a = 0;

    pixel = vec4(color.rgb, pixel.a);

    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), pixel);
}
